import inspect
import re
import json
from typing import Literal, List

from langgraph.graph import StateGraph, END
from langgraph.types import Command

from services.agents.agent_state import AgentState
{%- for agent_name in agents %}
from services.agents.{{ agent_name }}_agent import {{ agent_name|title|replace(" ", "") }}Agent
{%- endfor %}

def parse_question(text: str) -> List[str]:
    """
    Извлекает все блоки JSON, заключённые в ```json ... ``` из текста.
    Возвращает список строк (каждая — отдельный блок JSON).
    """
    pattern = r"```json\s*(.*?)\s*```"
    matches = re.search(pattern, text, re.DOTALL)
    result = None
    if matches:
        result = eval(matches.group(1))
    return result

{{ nodes_code }}

async def create_graph():
    {%- for agent_name in agents %}
    _{{ agent_name }}_agent = {{ agent_name|title|replace(" ", "") }}Agent()
    await _{{ agent_name }}_agent.create()
    {%- endfor %}
    builder = StateGraph(state_schema=AgentState)
    builder.set_entry_point("{{ initial_state }}")
    {%- for agent_name in agents %}
    builder.add_node("{{ agent_name }}", {{ agent_name }}_node(_{{ agent_name }}_agent))
    {%- endfor %}
    graph = builder.compile()
    return graph